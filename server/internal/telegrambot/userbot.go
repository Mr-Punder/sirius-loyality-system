package telegrambot

import (
	"encoding/json"
	"fmt"
	"strings"

	"github.com/MrPunder/sirius-loyality-system/internal/logger"
	"github.com/MrPunder/sirius-loyality-system/internal/models"
	"github.com/MrPunder/sirius-loyality-system/internal/storage"
	"github.com/google/uuid"
	tele "gopkg.in/telebot.v3"
)

// –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è —ç—Ç–∞–ø–æ–≤ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
const (
	RegistrationStepLastName   = 1
	RegistrationStepFirstName  = 2
	RegistrationStepMiddleName = 3
	RegistrationStepGroup      = 4
)

// RegistrationState —Ö—Ä–∞–Ω–∏—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
type RegistrationState struct {
	Step       int
	LastName   string
	FirstName  string
	MiddleName string
	Group      string
}

// UserBot –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç –±–æ—Ç–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
type UserBot struct {
	bot                *tele.Bot
	logger             logger.Logger
	config             Config
	apiClient          *APIClient
	registrationStates map[int64]*RegistrationState // –ö–∞—Ä—Ç–∞ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
}

// NewUserBot —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤–æ–≥–æ –±–æ—Ç–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
func NewUserBot(config Config, storage storage.Storage, logger logger.Logger) (*UserBot, error) {
	pref := tele.Settings{
		Token:  config.Token,
		Poller: &tele.LongPoller{Timeout: 10},
	}

	bot, err := tele.NewBot(pref)
	if err != nil {
		return nil, fmt.Errorf("–æ—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±–æ—Ç–∞: %w", err)
	}

	// –°–æ–∑–¥–∞–µ–º API-–∫–ª–∏–µ–Ω—Ç
	apiClient := NewAPIClient(config.ServerURL, config.APIToken, logger)

	return &UserBot{
		bot:                bot,
		logger:             logger,
		config:             config,
		apiClient:          apiClient,
		registrationStates: make(map[int64]*RegistrationState),
	}, nil
}

// Start –∑–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞
func (ub *UserBot) Start() error {
	ub.logger.Info("–ó–∞–ø—É—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –±–æ—Ç–∞")

	// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
	ub.bot.Handle("/start", ub.handleStart)

	// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /register
	ub.bot.Handle("/register", ub.handleRegister)

	// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /points
	ub.bot.Handle("/points", ub.handlePoints)

	// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è QR-–∫–æ–¥–æ–≤ –∏ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
	ub.bot.Handle(tele.OnText, ub.handleText)

	// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫
	ub.bot.Handle("üí∞ –ú–æ–∏ –±–∞–ª–ª—ã", ub.handlePointsButton)
	ub.bot.Handle("üì∑ –°–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å QR-–∫–æ–¥", ub.handleScanQRButton)
	ub.bot.Handle("‚ùì –ü–æ–º–æ—â—å", ub.handleHelpButton)
	ub.bot.Handle("üìù –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è", ub.handleRegisterButton)
	ub.bot.Handle("‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", ub.handleSkipButton)
	ub.bot.Handle("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", ub.handleCancelButton)

	// –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
	go ub.bot.Start()

	return nil
}

// handlePointsButton –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É "–ú–æ–∏ –±–∞–ª–ª—ã"
func (ub *UserBot) handlePointsButton(c tele.Context) error {
	// –ü—Ä–æ—Å—Ç–æ –≤—ã–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /points
	return ub.handlePoints(c)
}

// handleScanQRButton –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É "–°–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å QR-–∫–æ–¥"
func (ub *UserBot) handleScanQRButton(c tele.Context) error {
	ub.logger.Infof("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å %d –Ω–∞–∂–∞–ª –Ω–∞ –∫–Ω–æ–ø–∫—É '–°–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å QR-–∫–æ–¥'", c.Sender().ID)

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
	telegramID := fmt.Sprintf("%d", c.Sender().ID)

	// –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —á–µ—Ä–µ–∑ API
	usersData, err := ub.apiClient.Get("/users", nil)
	if err != nil {
		ub.logger.Errorf("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —á–µ—Ä–µ–∑ API: %v", err)
		return c.Send("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
	}

	// –î–µ–∫–æ–¥–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
	var usersResponse struct {
		Total int            `json:"total"`
		Users []*models.User `json:"users"`
	}
	if err := json.Unmarshal(usersData, &usersResponse); err != nil {
		ub.logger.Errorf("–û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ API: %v", err)
		return c.Send("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
	}

	var user *models.User
	for _, u := range usersResponse.Users {
		if u.Telegramm == telegramID && !u.Deleted {
			user = u
			break
		}
	}

	if user == nil {
		// –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω
		return c.Send("–¢—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ —Å–∏—Å—Ç–µ–º–µ. –ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫—É '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è' –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.")
	}

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–µ–π
	return c.Send("–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ QR-–∫–æ–¥ –≤ –≤–∏–¥–µ —Ç–µ–∫—Å—Ç–∞ (UUID).")
}

// handleHelpButton –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É "–ü–æ–º–æ—â—å"
func (ub *UserBot) handleHelpButton(c tele.Context) error {
	ub.logger.Infof("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å %d –Ω–∞–∂–∞–ª –Ω–∞ –∫–Ω–æ–ø–∫—É '–ü–æ–º–æ—â—å'", c.Sender().ID)

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ø—Ä–∞–≤–∫—É
	message := "–Ø –±–æ—Ç —Å–∏—Å—Ç–µ–º—ã –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏. –í–æ—Ç —á—Ç–æ —è —É–º–µ—é:\n\n" +
		"- –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤ —Å–∏—Å—Ç–µ–º–µ\n" +
		"- –ü—Ä–æ—Å–º–æ—Ç—Ä –±–∞–ª–ª–æ–≤\n" +
		"- –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ QR-–∫–æ–¥–æ–≤ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–ª–æ–≤\n\n" +
		"–ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –≤–Ω–∏–∑—É —ç–∫—Ä–∞–Ω–∞ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏."

	return c.Send(message)
}

// handleRegisterButton –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è"
func (ub *UserBot) handleRegisterButton(c tele.Context) error {
	// –ü—Ä–æ—Å—Ç–æ –≤—ã–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /register
	return ub.handleRegister(c)
}

// createRegistrationKeyboard —Å–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
func (ub *UserBot) createRegistrationKeyboard(withSkip bool) *tele.ReplyMarkup {
	keyboard := &tele.ReplyMarkup{ResizeKeyboard: true}
	btnCancel := keyboard.Text("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å")

	if withSkip {
		// –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏ "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å" –∏ "–û—Ç–º–µ–Ω–∏—Ç—å"
		btnSkip := keyboard.Text("‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å")
		keyboard.Reply(
			keyboard.Row(btnSkip),
			keyboard.Row(btnCancel),
		)
	} else {
		// –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Ç–æ–ª—å–∫–æ —Å –∫–Ω–æ–ø–∫–æ–π "–û—Ç–º–µ–Ω–∏—Ç—å"
		keyboard.Reply(keyboard.Row(btnCancel))
	}

	return keyboard
}

// handleSkipButton –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å"
func (ub *UserBot) handleSkipButton(c tele.Context) error {
	// –ü–æ–ª—É—á–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
	state, exists := ub.registrationStates[c.Sender().ID]
	if !exists {
		return c.Send("–¢—ã –Ω–µ –Ω–∞—Ö–æ–¥–∏—à—å—Å—è –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ò—Å–ø–æ–ª—å–∑—É–π /register –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.")
	}

	// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø—Ä–æ–ø—É—Å–∫ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–µ–∫—É—â–µ–≥–æ —à–∞–≥–∞
	if state.Step == RegistrationStepMiddleName {
		// –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –æ—Ç—á–µ—Å—Ç–≤–æ
		state.MiddleName = ""
		state.Step = RegistrationStepGroup
		// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –≥—Ä—É–ø–ø—ã —Å –∫–Ω–æ–ø–∫–æ–π "–û—Ç–º–µ–Ω–∏—Ç—å"
		keyboard := ub.createRegistrationKeyboard(false)
		return c.Send("–í–≤–µ–¥–∏ —Å–≤–æ—é –≥—Ä—É–ø–ø—É (–ù1-–ù6):", keyboard)
	}

	return c.Send("–ù–∞ –¥–∞–Ω–Ω–æ–º —ç—Ç–∞–ø–µ –Ω–µ–ª—å–∑—è –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –≤–≤–æ–¥.")
}

// handleCancelButton –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É "–û—Ç–º–µ–Ω–∏—Ç—å"
func (ub *UserBot) handleCancelButton(c tele.Context) error {
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
	_, exists := ub.registrationStates[c.Sender().ID]
	if !exists {
		return c.Send("–¢—ã –Ω–µ –Ω–∞—Ö–æ–¥–∏—à—å—Å—è –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.")
	}

	// –£–¥–∞–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
	delete(ub.registrationStates, c.Sender().ID)

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—Ç–º–µ–Ω–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Å –æ—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
	keyboard := ub.createMainKeyboard(false)
	return c.Send("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.", keyboard)
}

// Stop –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –±–æ—Ç–∞
func (ub *UserBot) Stop() error {
	ub.logger.Info("–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –±–æ—Ç–∞")
	ub.bot.Stop()
	return nil
}

// createMainKeyboard —Å–æ–∑–¥–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏
func (ub *UserBot) createMainKeyboard(isRegistered bool) *tele.ReplyMarkup {
	keyboard := &tele.ReplyMarkup{ResizeKeyboard: true}

	// –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏
	btnPoints := keyboard.Text("üí∞ –ú–æ–∏ –±–∞–ª–ª—ã")
	btnScanQR := keyboard.Text("üì∑ –°–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å QR-–∫–æ–¥")
	btnHelp := keyboard.Text("‚ùì –ü–æ–º–æ—â—å")
	btnRegister := keyboard.Text("üìù –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è")

	// –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
	if isRegistered {
		keyboard.Reply(
			keyboard.Row(btnPoints, btnScanQR),
			keyboard.Row(btnHelp),
		)
	} else {
		keyboard.Reply(
			keyboard.Row(btnRegister),
			keyboard.Row(btnHelp),
		)
	}

	return keyboard
}

// handleStart –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /start
func (ub *UserBot) handleStart(c tele.Context) error {
	ub.logger.Infof("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å %d –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞", c.Sender().ID)

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
	telegramID := fmt.Sprintf("%d", c.Sender().ID)

	// –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —á–µ—Ä–µ–∑ API
	usersData, err := ub.apiClient.Get("/users", nil)
	if err != nil {
		ub.logger.Errorf("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —á–µ—Ä–µ–∑ API: %v", err)
		return c.Send("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
	}

	// –î–µ–∫–æ–¥–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
	var usersResponse struct {
		Total int            `json:"total"`
		Users []*models.User `json:"users"`
	}
	if err := json.Unmarshal(usersData, &usersResponse); err != nil {
		ub.logger.Errorf("–û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ API: %v", err)
		return c.Send("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
	}

	var user *models.User
	for _, u := range usersResponse.Users {
		if u.Telegramm == telegramID && !u.Deleted {
			user = u
			break
		}
	}

	// –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
	var keyboard *tele.ReplyMarkup
	var message string

	if user != nil {
		// –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω
		keyboard = ub.createMainKeyboard(true)
		message = fmt.Sprintf("–ü—Ä–∏–≤–µ—Ç, %s! –¢—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ —Å–∏—Å—Ç–µ–º–µ. –ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏.", user.FirstName)
	} else {
		// –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω
		keyboard = ub.createMainKeyboard(false)
		message = "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç —Å–∏—Å—Ç–µ–º—ã –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏. –î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã —Ç–µ–±–µ –Ω—É–∂–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è."
	}

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
	return c.Send(message, keyboard)
}

// handleRegister –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /register
func (ub *UserBot) handleRegister(c tele.Context) error {
	ub.logger.Infof("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å %d –∑–∞–ø—Ä–æ—Å–∏–ª —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é", c.Sender().ID)

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
	telegramID := fmt.Sprintf("%d", c.Sender().ID)

	// –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —á–µ—Ä–µ–∑ API
	usersData, err := ub.apiClient.Get("/users", nil)
	if err != nil {
		ub.logger.Errorf("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —á–µ—Ä–µ–∑ API: %v", err)
		return c.Send("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
	}

	// –î–µ–∫–æ–¥–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
	var usersResponse struct {
		Total int            `json:"total"`
		Users []*models.User `json:"users"`
	}
	if err := json.Unmarshal(usersData, &usersResponse); err != nil {
		ub.logger.Errorf("–û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ API: %v", err)
		return c.Send("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
	}

	for _, u := range usersResponse.Users {
		if u.Telegramm == telegramID && !u.Deleted {
			// –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω
			keyboard := ub.createMainKeyboard(true)
			return c.Send(fmt.Sprintf("–¢—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ —Å–∏—Å—Ç–µ–º–µ –∫–∞–∫ %s %s.", u.FirstName, u.LastName), keyboard)
		}
	}

	// –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
	ub.registrationStates[c.Sender().ID] = &RegistrationState{
		Step: RegistrationStepLastName,
	}

	// –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ñ–∞–º–∏–ª–∏—é —Å –∫–Ω–æ–ø–∫–æ–π "–û—Ç–º–µ–Ω–∏—Ç—å"
	keyboard := ub.createRegistrationKeyboard(false)
	return c.Send("–î–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤–≤–µ–¥–∏ —Å–≤–æ—é —Ñ–∞–º–∏–ª–∏—é:", keyboard)
}

// handlePoints –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /points
func (ub *UserBot) handlePoints(c tele.Context) error {
	ub.logger.Infof("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å %d –∑–∞–ø—Ä–æ—Å–∏–ª –±–∞–ª–ª—ã", c.Sender().ID)

	// –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	telegramID := fmt.Sprintf("%d", c.Sender().ID)

	// –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —á–µ—Ä–µ–∑ API
	usersData, err := ub.apiClient.Get("/users", nil)
	if err != nil {
		ub.logger.Errorf("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —á–µ—Ä–µ–∑ API: %v", err)
		return c.Send("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±–∞–ª–ª–æ–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
	}

	// –î–µ–∫–æ–¥–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
	var usersResponse struct {
		Total int            `json:"total"`
		Users []*models.User `json:"users"`
	}
	if err := json.Unmarshal(usersData, &usersResponse); err != nil {
		ub.logger.Errorf("–û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ API: %v", err)
		return c.Send("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±–∞–ª–ª–æ–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
	}

	var user *models.User
	for _, u := range usersResponse.Users {
		if u.Telegramm == telegramID && !u.Deleted {
			user = u
			break
		}
	}

	if user == nil {
		// –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω
		keyboard := ub.createMainKeyboard(false)
		return c.Send("–¢—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ —Å–∏—Å—Ç–µ–º–µ. –ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫—É '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è' –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.", keyboard)
	}

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–∞–ª–ª–∞—Ö
	keyboard := ub.createMainKeyboard(true)
	return c.Send(fmt.Sprintf("–£ —Ç–µ–±—è %d –±–∞–ª–ª–æ–≤.", user.Points), keyboard)
}

// handleText –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
func (ub *UserBot) handleText(c tele.Context) error {
	text := c.Text()
	telegramID := fmt.Sprintf("%d", c.Sender().ID)

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ QR-–∫–æ–¥–æ–º (UUID)
	if isUUID(text) {
		return ub.handleQRCode(c, text)
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
	state, inRegistration := ub.registrationStates[c.Sender().ID]
	if inRegistration {
		return ub.handleRegistrationStep(c, text, state)
	}

	// –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è QR-–∫–æ–¥–æ–º –∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ø—Ä–∞–≤–∫—É
	// –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
	// –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —á–µ—Ä–µ–∑ API
	usersData, err := ub.apiClient.Get("/users", nil)
	if err != nil {
		ub.logger.Errorf("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —á–µ—Ä–µ–∑ API: %v", err)
		return c.Send("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
	}

	// –î–µ–∫–æ–¥–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
	var usersResponse struct {
		Total int            `json:"total"`
		Users []*models.User `json:"users"`
	}
	if err := json.Unmarshal(usersData, &usersResponse); err != nil {
		ub.logger.Errorf("–û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ API: %v", err)
		return c.Send("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
	}

	var user *models.User
	for _, u := range usersResponse.Users {
		if u.Telegramm == telegramID && !u.Deleted {
			user = u
			break
		}
	}

	var keyboard *tele.ReplyMarkup
	if user != nil {
		keyboard = ub.createMainKeyboard(true)
	} else {
		keyboard = ub.createMainKeyboard(false)
	}

	return c.Send("–Ø –Ω–µ –ø–æ–Ω–∏–º–∞—é —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ. –ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏.", keyboard)
}

// handleRegistrationStep –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —à–∞–≥–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
func (ub *UserBot) handleRegistrationStep(c tele.Context, text string, state *RegistrationState) error {
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ç–µ–∫—Å—Ç –∫–æ–º–∞–Ω–¥–æ–π "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å" –∏–ª–∏ "–û—Ç–º–µ–Ω–∏—Ç—å"
	if text == "‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å" {
		return ub.handleSkipButton(c)
	} else if text == "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å" {
		return ub.handleCancelButton(c)
	}

	switch state.Step {
	case RegistrationStepLastName:
		// –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–º–∏–ª–∏—é
		state.LastName = text
		state.Step = RegistrationStepFirstName
		// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∏–º–µ–Ω–∏ —Å –∫–Ω–æ–ø–∫–æ–π "–û—Ç–º–µ–Ω–∏—Ç—å"
		keyboard := ub.createRegistrationKeyboard(false)
		return c.Send("–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ —Å–≤–æ—ë –∏–º—è:", keyboard)

	case RegistrationStepFirstName:
		// –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–º—è
		state.FirstName = text
		state.Step = RegistrationStepMiddleName
		// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –æ—Ç—á–µ—Å—Ç–≤–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏ "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å" –∏ "–û—Ç–º–µ–Ω–∏—Ç—å"
		keyboard := ub.createRegistrationKeyboard(true)
		return c.Send("–í–≤–µ–¥–∏ —Å–≤–æ—ë –æ—Ç—á–µ—Å—Ç–≤–æ (–∏–ª–∏ –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å'):", keyboard)

	case RegistrationStepMiddleName:
		// –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Å—Ç–≤–æ
		state.MiddleName = text
		state.Step = RegistrationStepGroup
		// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –≥—Ä—É–ø–ø—ã —Å –∫–Ω–æ–ø–∫–æ–π "–û—Ç–º–µ–Ω–∏—Ç—å"
		keyboard := ub.createRegistrationKeyboard(false)
		return c.Send("–í–≤–µ–¥–∏ —Å–≤–æ—é –≥—Ä—É–ø–ø—É (–ù1-–ù6):", keyboard)

	case RegistrationStepGroup:
		// –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –≥—Ä—É–ø–ø—É
		normalizedGroup, valid := NormalizeGroupName(text)
		if !valid {
			// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ —Å –∫–Ω–æ–ø–∫–æ–π "–û—Ç–º–µ–Ω–∏—Ç—å"
			keyboard := ub.createRegistrationKeyboard(false)
			return c.Send("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≥—Ä—É–ø–ø—ã. –ì—Ä—É–ø–ø–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç –ù1 –¥–æ –ù6 (–∏–ª–∏ H1 –¥–æ H6).", keyboard)
		}

		// –°–æ—Ö—Ä–∞–Ω—è–µ–º –≥—Ä—É–ø–ø—É
		state.Group = normalizedGroup

		// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
		telegramID := fmt.Sprintf("%d", c.Sender().ID)

		// –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —á–µ—Ä–µ–∑ API
		usersData, err := ub.apiClient.Get("/users", nil)
		if err != nil {
			ub.logger.Errorf("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —á–µ—Ä–µ–∑ API: %v", err)
			return c.Send("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
		}

		// –î–µ–∫–æ–¥–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
		var usersResponse struct {
			Total int            `json:"total"`
			Users []*models.User `json:"users"`
		}
		if err := json.Unmarshal(usersData, &usersResponse); err != nil {
			ub.logger.Errorf("–û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ API: %v", err)
			return c.Send("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
		}

		for _, u := range usersResponse.Users {
			if u.Telegramm == telegramID && !u.Deleted {
				// –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω
				delete(ub.registrationStates, c.Sender().ID) // –£–¥–∞–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
				return c.Send(fmt.Sprintf("–¢—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ —Å–∏—Å—Ç–µ–º–µ –∫–∞–∫ %s %s.", u.FirstName, u.LastName))
			}
		}

		// –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ API
		_, err = ub.apiClient.Post("/users/register", map[string]interface{}{
			"telegramm":   telegramID,
			"first_name":  state.FirstName,
			"last_name":   state.LastName,
			"middle_name": state.MiddleName,
			"group":       state.Group,
		})
		if err != nil {
			ub.logger.Errorf("–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ API: %v", err)
			return c.Send("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
		}

		// –£–¥–∞–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
		delete(ub.registrationStates, c.Sender().ID)

		// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
		keyboard := ub.createMainKeyboard(true)

		// –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
		successMessage := fmt.Sprintf("–¢—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –∫–∞–∫ %s %s", state.LastName, state.FirstName)
		if state.MiddleName != "" {
			successMessage += fmt.Sprintf(" %s", state.MiddleName)
		}
		successMessage += fmt.Sprintf(" –≤ –≥—Ä—É–ø–ø–µ %s.", state.Group)

		return c.Send(successMessage, keyboard)
	}

	return nil
}

// handleQRCode –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç QR-–∫–æ–¥
func (ub *UserBot) handleQRCode(c tele.Context, code string) error {
	ub.logger.Infof("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å %d –æ—Ç–ø—Ä–∞–≤–∏–ª QR-–∫–æ–¥: %s", c.Sender().ID, code)

	// –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	telegramID := fmt.Sprintf("%d", c.Sender().ID)

	// –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —á–µ—Ä–µ–∑ API
	usersData, err := ub.apiClient.Get("/users", nil)
	if err != nil {
		ub.logger.Errorf("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —á–µ—Ä–µ–∑ API: %v", err)
		return c.Send("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–∏ QR-–∫–æ–¥–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
	}

	// –î–µ–∫–æ–¥–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
	var usersResponse struct {
		Total int            `json:"total"`
		Users []*models.User `json:"users"`
	}
	if err := json.Unmarshal(usersData, &usersResponse); err != nil {
		ub.logger.Errorf("–û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ API: %v", err)
		return c.Send("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–∏ QR-–∫–æ–¥–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
	}

	var user *models.User
	for _, u := range usersResponse.Users {
		if u.Telegramm == telegramID && !u.Deleted {
			user = u
			break
		}
	}

	if user == nil {
		// –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω
		return c.Send("–¢—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ —Å–∏—Å—Ç–µ–º–µ. –ò—Å–ø–æ–ª—å–∑—É–π /register –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.")
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–¥ —è–≤–ª—è–µ—Ç—Å—è –≤–∞–ª–∏–¥–Ω—ã–º UUID
	if _, err := uuid.Parse(code); err != nil {
		ub.logger.Errorf("–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ UUID: %v", err)
		return c.Send("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç QR-–∫–æ–¥–∞.")
	}

	// –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–¥–µ —á–µ—Ä–µ–∑ API
	codeData, err := ub.apiClient.Get("/codes/"+code, nil)
	if err != nil {
		ub.logger.Errorf("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–¥–µ —á–µ—Ä–µ–∑ API: %v", err)
		return c.Send("QR-–∫–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
	}

	// –î–µ–∫–æ–¥–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
	var codeInfo models.Code
	if err := json.Unmarshal(codeData, &codeInfo); err != nil {
		ub.logger.Errorf("–û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ API: %v", err)
		return c.Send("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–¥–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∞–∫—Ç–∏–≤–µ–Ω –ª–∏ –∫–æ–¥
	if !codeInfo.IsActive {
		return c.Send("–≠—Ç–æ—Ç QR-–∫–æ–¥ –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω.")
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∫ –Ω—É–∂–Ω–æ–π –≥—Ä—É–ø–ø–µ
	if codeInfo.Group != "" && user.Group != codeInfo.Group {
		return c.Send(fmt.Sprintf("–≠—Ç–æ—Ç QR-–∫–æ–¥ –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω —Ç–æ–ª—å–∫–æ –¥–ª—è –≥—Ä—É–ø–ø—ã %s.", codeInfo.Group))
	}

	// –ü—Ä–∏–º–µ–Ω—è–µ–º –∫–æ–¥ —á–µ—Ä–µ–∑ API
	applyData, err := ub.apiClient.Post("/codes/"+code+"/apply", map[string]interface{}{
		"user_id": user.Id,
	})
	if err != nil {
		ub.logger.Errorf("–û—à–∏–±–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∫–æ–¥–∞ —á–µ—Ä–µ–∑ API: %v", err)

		// –í–æ–∑–≤—Ä–∞—â–∞–µ–º –±–æ–ª–µ–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–µ –æ—à–∏–±–∫–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –æ—à–∏–±–∫–∏
		errorMsg := "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–∏ QR-–∫–æ–¥–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
		if strings.Contains(err.Error(), "code usage limit exceeded") {
			errorMsg = "–ü—Ä–µ–≤—ã—à–µ–Ω–æ –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π QR-–∫–æ–¥–∞."
		} else if strings.Contains(err.Error(), "user code usage limit exceeded") {
			errorMsg = "–¢—ã —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª —ç—Ç–æ—Ç QR-–∫–æ–¥ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞–∑."
		} else if strings.Contains(err.Error(), "code is not active") {
			errorMsg = "–≠—Ç–æ—Ç QR-–∫–æ–¥ –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω."
		}

		return c.Send(errorMsg)
	}

	// –î–µ–∫–æ–¥–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
	var applyResponse struct {
		Success     bool `json:"success"`
		PointsAdded int  `json:"points_added"`
		TotalPoints int  `json:"total_points"`
	}
	if err := json.Unmarshal(applyData, &applyResponse); err != nil {
		ub.logger.Errorf("–û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ API: %v", err)
		return c.Send("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–∏ QR-–∫–æ–¥–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
	}

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–∏ QR-–∫–æ–¥–∞ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
	keyboard := ub.createMainKeyboard(true)
	return c.Send(fmt.Sprintf("QR-–∫–æ–¥ —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–º–µ–Ω–µ–Ω! –î–æ–±–∞–≤–ª–µ–Ω–æ %d –±–∞–ª–ª–æ–≤. –¢–µ–ø–µ—Ä—å —É —Ç–µ–±—è %d –±–∞–ª–ª–æ–≤.",
		applyResponse.PointsAdded, applyResponse.TotalPoints), keyboard)
}

// isUUID –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å—Ç—Ä–æ–∫–∞ UUID
func isUUID(s string) bool {
	_, err := uuid.Parse(s)
	return err == nil
}
