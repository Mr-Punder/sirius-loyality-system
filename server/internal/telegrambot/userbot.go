package telegrambot

import (
	"fmt"
	"strings"

	"github.com/MrPunder/sirius-loyality-system/internal/logger"
	"github.com/MrPunder/sirius-loyality-system/internal/models"
	"github.com/MrPunder/sirius-loyality-system/internal/storage"
	"github.com/google/uuid"
	tele "gopkg.in/telebot.v3"
)

// UserBot –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç –±–æ—Ç–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
type UserBot struct {
	bot       *tele.Bot
	storage   storage.Storage
	logger    logger.Logger
	config    Config
	apiClient *APIClient
}

// NewUserBot —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤–æ–≥–æ –±–æ—Ç–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
func NewUserBot(config Config, storage storage.Storage, logger logger.Logger) (*UserBot, error) {
	pref := tele.Settings{
		Token:  config.Token,
		Poller: &tele.LongPoller{Timeout: 10},
	}

	bot, err := tele.NewBot(pref)
	if err != nil {
		return nil, fmt.Errorf("–æ—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±–æ—Ç–∞: %w", err)
	}

	// –°–æ–∑–¥–∞–µ–º API-–∫–ª–∏–µ–Ω—Ç
	apiClient := NewAPIClient(config.ServerURL, config.APIToken, logger)

	return &UserBot{
		bot:       bot,
		storage:   storage,
		logger:    logger,
		config:    config,
		apiClient: apiClient,
	}, nil
}

// Start –∑–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞
func (ub *UserBot) Start() error {
	ub.logger.Info("–ó–∞–ø—É—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –±–æ—Ç–∞")

	// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
	ub.bot.Handle("/start", ub.handleStart)

	// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /register
	ub.bot.Handle("/register", ub.handleRegister)

	// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /points
	ub.bot.Handle("/points", ub.handlePoints)

	// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è QR-–∫–æ–¥–æ–≤
	ub.bot.Handle(tele.OnText, ub.handleText)

	// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫
	ub.bot.Handle("üí∞ –ú–æ–∏ –±–∞–ª–ª—ã", ub.handlePointsButton)
	ub.bot.Handle("üì∑ –°–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å QR-–∫–æ–¥", ub.handleScanQRButton)
	ub.bot.Handle("‚ùì –ü–æ–º–æ—â—å", ub.handleHelpButton)
	ub.bot.Handle("üìù –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è", ub.handleRegisterButton)

	// –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
	go ub.bot.Start()

	return nil
}

// handlePointsButton –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É "–ú–æ–∏ –±–∞–ª–ª—ã"
func (ub *UserBot) handlePointsButton(c tele.Context) error {
	// –ü—Ä–æ—Å—Ç–æ –≤—ã–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /points
	return ub.handlePoints(c)
}

// handleScanQRButton –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É "–°–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å QR-–∫–æ–¥"
func (ub *UserBot) handleScanQRButton(c tele.Context) error {
	ub.logger.Infof("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å %d –Ω–∞–∂–∞–ª –Ω–∞ –∫–Ω–æ–ø–∫—É '–°–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å QR-–∫–æ–¥'", c.Sender().ID)

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
	telegramID := fmt.Sprintf("%d", c.Sender().ID)
	users, err := ub.storage.GetAllUsers()
	if err != nil {
		ub.logger.Errorf("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: %v", err)
		return c.Send("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
	}

	var user *models.User
	for _, u := range users {
		if u.Telegramm == telegramID && !u.Deleted {
			user = u
			break
		}
	}

	if user == nil {
		// –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω
		return c.Send("–¢—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ —Å–∏—Å—Ç–µ–º–µ. –ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫—É '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è' –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.")
	}

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–µ–π
	return c.Send("–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ QR-–∫–æ–¥ –≤ –≤–∏–¥–µ —Ç–µ–∫—Å—Ç–∞ (UUID).")
}

// handleHelpButton –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É "–ü–æ–º–æ—â—å"
func (ub *UserBot) handleHelpButton(c tele.Context) error {
	ub.logger.Infof("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å %d –Ω–∞–∂–∞–ª –Ω–∞ –∫–Ω–æ–ø–∫—É '–ü–æ–º–æ—â—å'", c.Sender().ID)

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ø—Ä–∞–≤–∫—É
	message := "–Ø –±–æ—Ç —Å–∏—Å—Ç–µ–º—ã –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏. –í–æ—Ç —á—Ç–æ —è —É–º–µ—é:\n\n" +
		"- –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤ —Å–∏—Å—Ç–µ–º–µ\n" +
		"- –ü—Ä–æ—Å–º–æ—Ç—Ä –±–∞–ª–ª–æ–≤\n" +
		"- –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ QR-–∫–æ–¥–æ–≤ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–ª–æ–≤\n\n" +
		"–ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –≤–Ω–∏–∑—É —ç–∫—Ä–∞–Ω–∞ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏."

	return c.Send(message)
}

// handleRegisterButton –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è"
func (ub *UserBot) handleRegisterButton(c tele.Context) error {
	// –ü—Ä–æ—Å—Ç–æ –≤—ã–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /register
	return ub.handleRegister(c)
}

// Stop –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –±–æ—Ç–∞
func (ub *UserBot) Stop() error {
	ub.logger.Info("–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –±–æ—Ç–∞")
	ub.bot.Stop()
	return nil
}

// createMainKeyboard —Å–æ–∑–¥–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏
func (ub *UserBot) createMainKeyboard(isRegistered bool) *tele.ReplyMarkup {
	keyboard := &tele.ReplyMarkup{ResizeKeyboard: true}

	// –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏
	btnPoints := keyboard.Text("üí∞ –ú–æ–∏ –±–∞–ª–ª—ã")
	btnScanQR := keyboard.Text("üì∑ –°–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å QR-–∫–æ–¥")
	btnHelp := keyboard.Text("‚ùì –ü–æ–º–æ—â—å")
	btnRegister := keyboard.Text("üìù –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è")

	// –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
	if isRegistered {
		keyboard.Reply(
			keyboard.Row(btnPoints, btnScanQR),
			keyboard.Row(btnHelp),
		)
	} else {
		keyboard.Reply(
			keyboard.Row(btnRegister),
			keyboard.Row(btnHelp),
		)
	}

	return keyboard
}

// handleStart –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /start
func (ub *UserBot) handleStart(c tele.Context) error {
	ub.logger.Infof("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å %d –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞", c.Sender().ID)

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
	telegramID := fmt.Sprintf("%d", c.Sender().ID)
	users, err := ub.storage.GetAllUsers()
	if err != nil {
		ub.logger.Errorf("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: %v", err)
		return c.Send("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
	}

	var user *models.User
	for _, u := range users {
		if u.Telegramm == telegramID && !u.Deleted {
			user = u
			break
		}
	}

	// –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
	var keyboard *tele.ReplyMarkup
	var message string

	if user != nil {
		// –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω
		keyboard = ub.createMainKeyboard(true)
		message = fmt.Sprintf("–ü—Ä–∏–≤–µ—Ç, %s! –¢—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ —Å–∏—Å—Ç–µ–º–µ. –ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏.", user.FirstName)
	} else {
		// –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω
		keyboard = ub.createMainKeyboard(false)
		message = "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç —Å–∏—Å—Ç–µ–º—ã –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏. –î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã —Ç–µ–±–µ –Ω—É–∂–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è."
	}

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
	return c.Send(message, keyboard)
}

// handleRegister –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /register
func (ub *UserBot) handleRegister(c tele.Context) error {
	ub.logger.Infof("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å %d –∑–∞–ø—Ä–æ—Å–∏–ª —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é", c.Sender().ID)

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
	telegramID := fmt.Sprintf("%d", c.Sender().ID)
	users, err := ub.storage.GetAllUsers()
	if err != nil {
		ub.logger.Errorf("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: %v", err)
		return c.Send("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
	}

	for _, u := range users {
		if u.Telegramm == telegramID && !u.Deleted {
			// –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω
			keyboard := ub.createMainKeyboard(true)
			return c.Send(fmt.Sprintf("–¢—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ —Å–∏—Å—Ç–µ–º–µ –∫–∞–∫ %s %s.", u.FirstName, u.LastName), keyboard)
		}
	}

	// –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
	return c.Send("–î–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –æ—Ç–ø—Ä–∞–≤—å —Å–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: –ò–º—è –§–∞–º–∏–ª–∏—è –ì—Ä—É–ø–ø–∞\n–ù–∞–ø—Ä–∏–º–µ—Ä: –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤ –ù1")
}

// handlePoints –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /points
func (ub *UserBot) handlePoints(c tele.Context) error {
	ub.logger.Infof("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å %d –∑–∞–ø—Ä–æ—Å–∏–ª –±–∞–ª–ª—ã", c.Sender().ID)

	// –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	telegramID := fmt.Sprintf("%d", c.Sender().ID)
	users, err := ub.storage.GetAllUsers()
	if err != nil {
		ub.logger.Errorf("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: %v", err)
		return c.Send("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±–∞–ª–ª–æ–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
	}

	var user *models.User
	for _, u := range users {
		if u.Telegramm == telegramID && !u.Deleted {
			user = u
			break
		}
	}

	if user == nil {
		// –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω
		keyboard := ub.createMainKeyboard(false)
		return c.Send("–¢—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ —Å–∏—Å—Ç–µ–º–µ. –ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫—É '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è' –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.", keyboard)
	}

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–∞–ª–ª–∞—Ö
	keyboard := ub.createMainKeyboard(true)
	return c.Send(fmt.Sprintf("–£ —Ç–µ–±—è %d –±–∞–ª–ª–æ–≤.", user.Points), keyboard)
}

// handleText –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
func (ub *UserBot) handleText(c tele.Context) error {
	text := c.Text()
	telegramID := fmt.Sprintf("%d", c.Sender().ID)

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ QR-–∫–æ–¥–æ–º (UUID)
	if isUUID(text) {
		return ub.handleQRCode(c, text)
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã–º–∏ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
	parts := strings.Fields(text)
	if len(parts) >= 3 {
		// –ü–æ–ª—É—á–∞–µ–º –∏–º—è, —Ñ–∞–º–∏–ª–∏—é –∏ –≥—Ä—É–ø–ø—É
		firstName := parts[0]
		lastName := parts[1]
		groupInput := parts[2]

		// –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –≥—Ä—É–ø–ø—É
		normalizedGroup, valid := NormalizeGroupName(groupInput)
		if !valid {
			return c.Send("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≥—Ä—É–ø–ø—ã. –ì—Ä—É–ø–ø–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç –ù1 –¥–æ –ù6 (–∏–ª–∏ H1 –¥–æ H6).")
		}

		// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
		users, err := ub.storage.GetAllUsers()
		if err != nil {
			ub.logger.Errorf("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: %v", err)
			return c.Send("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
		}

		for _, u := range users {
			if u.Telegramm == telegramID && !u.Deleted {
				// –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω
				return c.Send(fmt.Sprintf("–¢—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ —Å–∏—Å—Ç–µ–º–µ –∫–∞–∫ %s %s.", u.FirstName, u.LastName))
			}
		}

		// –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
		user := &models.User{
			Id:               uuid.New(),
			Telegramm:        telegramID,
			FirstName:        firstName,
			LastName:         lastName,
			MiddleName:       "",
			Points:           0,
			Group:            normalizedGroup,
			RegistrationTime: models.GetCurrentTime(),
			Deleted:          false,
		}

		// –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
		if err := ub.storage.AddUser(user); err != nil {
			ub.logger.Errorf("–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: %v", err)
			return c.Send("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
		}

		// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
		keyboard := ub.createMainKeyboard(true)
		return c.Send(fmt.Sprintf("–¢—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –∫–∞–∫ %s %s –≤ –≥—Ä—É–ø–ø–µ %s.", firstName, lastName, normalizedGroup), keyboard)
	}

	// –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è QR-–∫–æ–¥–æ–º –∏–ª–∏ –¥–∞–Ω–Ω—ã–º–∏ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ø—Ä–∞–≤–∫—É
	// –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
	users, err := ub.storage.GetAllUsers()
	if err != nil {
		ub.logger.Errorf("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: %v", err)
		return c.Send("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
	}

	var user *models.User
	for _, u := range users {
		if u.Telegramm == telegramID && !u.Deleted {
			user = u
			break
		}
	}

	var keyboard *tele.ReplyMarkup
	if user != nil {
		keyboard = ub.createMainKeyboard(true)
	} else {
		keyboard = ub.createMainKeyboard(false)
	}

	return c.Send("–Ø –Ω–µ –ø–æ–Ω–∏–º–∞—é —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ. –ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏.", keyboard)
}

// handleQRCode –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç QR-–∫–æ–¥
func (ub *UserBot) handleQRCode(c tele.Context, code string) error {
	ub.logger.Infof("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å %d –æ—Ç–ø—Ä–∞–≤–∏–ª QR-–∫–æ–¥: %s", c.Sender().ID, code)

	// –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	telegramID := fmt.Sprintf("%d", c.Sender().ID)
	users, err := ub.storage.GetAllUsers()
	if err != nil {
		ub.logger.Errorf("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: %v", err)
		return c.Send("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–∏ QR-–∫–æ–¥–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
	}

	var user *models.User
	for _, u := range users {
		if u.Telegramm == telegramID && !u.Deleted {
			user = u
			break
		}
	}

	if user == nil {
		// –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω
		return c.Send("–¢—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ —Å–∏—Å—Ç–µ–º–µ. –ò—Å–ø–æ–ª—å–∑—É–π /register –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.")
	}

	// –ü–∞—Ä—Å–∏–º UUID
	codeUUID, err := uuid.Parse(code)
	if err != nil {
		ub.logger.Errorf("–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ UUID: %v", err)
		return c.Send("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç QR-–∫–æ–¥–∞.")
	}

	// –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–¥–µ
	codeInfo, err := ub.storage.GetCodeInfo(codeUUID)
	if err != nil {
		ub.logger.Errorf("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–¥–µ: %v", err)
		return c.Send("QR-–∫–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∞–∫—Ç–∏–≤–µ–Ω –ª–∏ –∫–æ–¥
	if !codeInfo.IsActive {
		return c.Send("–≠—Ç–æ—Ç QR-–∫–æ–¥ –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω.")
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∫ –Ω—É–∂–Ω–æ–π –≥—Ä—É–ø–ø–µ
	if codeInfo.Group != "" && user.Group != codeInfo.Group {
		return c.Send(fmt.Sprintf("–≠—Ç–æ—Ç QR-–∫–æ–¥ –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω —Ç–æ–ª—å–∫–æ –¥–ª—è –≥—Ä—É–ø–ø—ã %s.", codeInfo.Group))
	}

	// –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫–æ–¥–∞
	usage := &models.CodeUsage{
		Id:     uuid.New(),
		Code:   codeUUID,
		UserId: user.Id,
		Count:  1,
	}

	// –î–æ–±–∞–≤–ª—è–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫–æ–¥–∞
	if err := ub.storage.AddCodeUsage(usage); err != nil {
		ub.logger.Errorf("–û—à–∏–±–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∫–æ–¥–∞: %v", err)

		// –í–æ–∑–≤—Ä–∞—â–∞–µ–º –±–æ–ª–µ–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–µ –æ—à–∏–±–∫–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –æ—à–∏–±–∫–∏
		switch err.Error() {
		case "code usage limit exceeded":
			return c.Send("–ü—Ä–µ–≤—ã—à–µ–Ω–æ –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π QR-–∫–æ–¥–∞.")
		case "user code usage limit exceeded":
			return c.Send("–¢—ã —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª —ç—Ç–æ—Ç QR-–∫–æ–¥ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞–∑.")
		case "code is not active":
			return c.Send("–≠—Ç–æ—Ç QR-–∫–æ–¥ –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω.")
		default:
			return c.Send("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–∏ QR-–∫–æ–¥–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
		}
	}

	// –°–æ–∑–¥–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
	transaction := &models.Transaction{
		Id:     uuid.New(),
		UserId: user.Id,
		Code:   codeUUID,
		Diff:   codeInfo.Amount,
		Time:   models.GetCurrentTime(),
	}

	// –î–æ–±–∞–≤–ª—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
	if err := ub.storage.AddTransaction(transaction); err != nil {
		ub.logger.Errorf("–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: %v", err)
		return c.Send("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –±–∞–ª–ª–æ–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
	}

	// –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –±–∞–ª–ª—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	points, err := ub.storage.GetUserPoints(user.Id)
	if err != nil {
		ub.logger.Errorf("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–ª–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: %v", err)
		return c.Send("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±–∞–ª–ª–æ–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
	}

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–∏ QR-–∫–æ–¥–∞ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
	keyboard := ub.createMainKeyboard(true)
	return c.Send(fmt.Sprintf("QR-–∫–æ–¥ —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–º–µ–Ω–µ–Ω! –î–æ–±–∞–≤–ª–µ–Ω–æ %d –±–∞–ª–ª–æ–≤. –¢–µ–ø–µ—Ä—å —É —Ç–µ–±—è %d –±–∞–ª–ª–æ–≤.", codeInfo.Amount, points), keyboard)
}

// isUUID –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å—Ç—Ä–æ–∫–∞ UUID
func isUUID(s string) bool {
	_, err := uuid.Parse(s)
	return err == nil
}

// –ò—Å–ø–æ–ª—å–∑—É–µ–º NormalizeGroupName –∏–∑ utils.go
